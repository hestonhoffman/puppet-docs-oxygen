<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="concept-676" domains="(topic concept)                            (topic hi-d)                            (topic ut-d)                            (topic indexing-d)                             (topic pr-d)                            (topic sw-d)                            (topic ui-d)   " ditaarch:DITAArchVersion="1.2" class="- topic/topic concept/concept "><title class="- topic/title ">Naming tasks</title><shortdesc class="- topic/shortdesc ">Task names are named based on the filename of the task, the name of the module, and the path to the task within the module.</shortdesc><prolog class="- topic/prolog "><author type="creator" translate="no" class="- topic/author ">Jean Bond &lt;jean@puppet.com&gt;</author></prolog><conbody class="- topic/body  concept/conbody "><p class="- topic/p ">You can write tasks in any language that run on the target nodes. Give task files the extension for the language they are written in (such as <codeph translate="no" class="+ topic/ph pr-d/codeph ">.rb</codeph> for Ruby), and place them in the top level of your module's <codeph translate="no" class="+ topic/ph pr-d/codeph ">./tasks</codeph> directory.</p><p class="- topic/p ">Task names are composed of one or two name segments, indicating:</p><p class="- topic/p "><ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p ">The name of the module where the task is located.</p></li><li class="- topic/li "><p class="- topic/p ">The name of the task file, without the extension.</p></li></ul></p><p class="- topic/p ">For example, the <codeph translate="no" class="+ topic/ph pr-d/codeph ">puppetlabs-mysql</codeph> module has the <codeph translate="no" class="+ topic/ph pr-d/codeph ">sql</codeph> task in <codeph translate="no" class="+ topic/ph pr-d/codeph ">./mysql/tasks/sql.rb</codeph>, so the task name is <codeph translate="no" class="+ topic/ph pr-d/codeph ">mysql::sql</codeph>. This name is how you refer to the task when you run tasks.</p><p class="- topic/p ">The task filename <codeph translate="no" class="+ topic/ph pr-d/codeph ">init</codeph> is special: the task it defines is referenced using the module name only. For example, in the <codeph translate="no" class="+ topic/ph pr-d/codeph ">puppetlabs-service</codeph> module, the task defined in <codeph translate="no" class="+ topic/ph pr-d/codeph ">init.rb</codeph> is the <codeph translate="no" class="+ topic/ph pr-d/codeph ">service</codeph> task. </p><p class="- topic/p ">Each task or plan name segment must begin with a lowercase letter and:</p><ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p ">Must start with a lowercase letter.</p></li><li class="- topic/li "><p class="- topic/p ">May include digits.</p></li><li class="- topic/li "><p outputclass="jean@puppet.com" class="- topic/p ">May include underscores.</p></li><li class="- topic/li "><p class="- topic/p ">Namespace segments must match the following regular expression <codeph translate="no" class="+ topic/ph pr-d/codeph ">\A[a-z][a-z0-9_]*\Z</codeph> </p></li><li class="- topic/li ">The file extension must not use the reserved extensions .md or .json.</li></ul><section class="- topic/section "><title id="title-1540500836793" class="- topic/title ">Tasks with a single implementation</title><p class="- topic/p ">A task can consist of a single executable with or without a corresponding metadata file. For instance,&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">./mysql/tasks/sql.rb</codeph>&#160;and&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">./mysql/tasks/sql.json</codeph>. In this case, no other&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">./mysql/tasks/sql.*</codeph>&#160;files can exist.</p></section><section class="- topic/section "><title id="title-1540500843922" class="- topic/title ">Tasks with multiple implementations</title><p class="- topic/p ">A task can also have multiple implementations, with metadata that explains when to use each one. A primary use case for this is to support different implementations for different target platforms, referred to as <codeph translate="no" class="+ topic/ph pr-d/codeph ">cross-platform tasks</codeph>. For instance, consider a module with the following files:<codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">- tasks
  - sql_linux.sh
  - sql_linux.json
  - sql_windows.ps1
  - sql_windows.json
  - sql.json</codeblock> </p><p class="- topic/p ">This task has two executables (<codeph translate="no" class="+ topic/ph pr-d/codeph ">sql_linux.sh</codeph>&#160;and&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">sql_windows.ps1</codeph>), each with an implementation metadata file and a task metadata file. The executables have distinct names and are compatible with older task runners such as <ph conkeyref="ProductNames/pe_long" class="- topic/ph "/> 2018.1 and earlier. Each implementation has it's own metadata which documents how to use the implementation directly or marks it as private to hide it from UI lists.</p><p class="- topic/p ">An implementation metadata example: <codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">{
  "name": "SQL Linux",
  "description": "A task to perform sql operations on linux targets",
  "private": true
}</codeblock> </p><p class="- topic/p ">The task metadata file contains an implementations section: </p><codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">{
  "implementations": [
    {"name": "sql_linux.sh", "requirements": ["shell"]},
    {"name": "sql_windows.ps1", "requirements": ["powershell"]}
  ]
}</codeblock><p class="- topic/p ">Each implementations has a&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">name</codeph>&#160;and a list of&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">requirements</codeph>. The requirements are the set of&#160;<i class="+ topic/ph hi-d/i ">features</i>&#160;which must be available on the target in order for that implementation to be used. In this case, the&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">sql_linux.sh</codeph>&#160;implementation requires the&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">shell</codeph>&#160;feature, and the&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">sql_windows.ps1</codeph>&#160;implementations requires the&#160;<ph conkeyref="ProductNames/powershell" class="- topic/ph "/> feature.</p><p class="- topic/p ">The set of features available on the target is determined by the task runner. You can specify additional features for a target via&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">set_feature</codeph> or by adding&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">features</codeph>&#160;in the inventory. The task runner chooses the&#160;<i class="+ topic/ph hi-d/i ">first&#160;</i>implementation whose requirements are satisfied.</p><p class="- topic/p ">The following features are defined by default:</p><ul class="- topic/ul "><li class="- topic/li "> <codeph translate="no" class="+ topic/ph pr-d/codeph ">puppet-agent</codeph>: present if the target has the <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> agent package installed</li><li class="- topic/li "> <codeph translate="no" class="+ topic/ph pr-d/codeph ">shell</codeph>: present if the target has a posix shell</li><li class="- topic/li "> <codeph translate="no" class="+ topic/ph pr-d/codeph ">powershell</codeph>: present if the target has <ph conkeyref="ProductNames/powershell" class="- topic/ph "/> </li></ul></section></conbody></concept>
