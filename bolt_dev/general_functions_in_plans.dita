<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="concept-1196" domains="(topic concept)                            (topic hi-d)                            (topic ut-d)                            (topic indexing-d)                             (topic pr-d)                            (topic sw-d)                            (topic ui-d)   " ditaarch:DITAArchVersion="1.2" class="- topic/topic concept/concept "><title class="- topic/title "> <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> and <ph conkeyref="ProductNames/ruby" class="- topic/ph "/> functions in plans</title><shortdesc class="- topic/shortdesc ">You can define and call <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> language and <ph conkeyref="ProductNames/ruby" class="- topic/ph "/> functions in plans.</shortdesc><prolog class="- topic/prolog "><author type="creator" translate="no" class="- topic/author ">Jean Bond &lt;jean@puppet.com&gt;</author></prolog><conbody class="- topic/body  concept/conbody "><p class="- topic/p ">This is useful for packaging common general logic in your plan. You can also call the plan functions, such as <codeph translate="no" class="+ topic/ph pr-d/codeph ">run_task</codeph> or <codeph translate="no" class="+ topic/ph pr-d/codeph ">run_plan</codeph>, from within a function.</p><p class="- topic/p ">Not all <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> language constructs are allowed in plans. The following constructs are not allowed:</p><ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p ">Defined types.</p></li><li class="- topic/li "><p class="- topic/p ">Classes.</p></li><li class="- topic/li "><p class="- topic/p ">Resource expressions, such as <codeph translate="no" class="+ topic/ph pr-d/codeph ">file { title: mode =&gt; '0777' }</codeph> </p></li><li class="- topic/li "><p class="- topic/p ">Resource default expressions, such as <codeph translate="no" class="+ topic/ph pr-d/codeph ">File { mode =&gt; '0666' }</codeph> </p></li><li class="- topic/li "><p class="- topic/p ">Resource overrides, such as <codeph translate="no" class="+ topic/ph pr-d/codeph ">File['/tmp/foo'] { mode =&gt; '0444' }</codeph> </p></li><li class="- topic/li "><p class="- topic/p ">Relationship operators: <codeph translate="no" class="+ topic/ph pr-d/codeph ">-&gt; &lt;- ~&gt; &lt;~</codeph> </p></li><li class="- topic/li "><p class="- topic/p ">Functions that operate on a catalog: <codeph translate="no" class="+ topic/ph pr-d/codeph ">include</codeph>, <codeph translate="no" class="+ topic/ph pr-d/codeph ">require</codeph>, <codeph translate="no" class="+ topic/ph pr-d/codeph ">contain</codeph>, <codeph translate="no" class="+ topic/ph pr-d/codeph ">create_resources</codeph>.</p></li><li class="- topic/li "><p class="- topic/p ">Collector expressions, such as <codeph translate="no" class="+ topic/ph pr-d/codeph ">SomeType &lt;| |&gt;</codeph>, <codeph translate="no" class="+ topic/ph pr-d/codeph ">SomeType &lt;&lt;| |&gt;&gt;</codeph> </p></li><li class="- topic/li "><p class="- topic/p ">ERB templates are not supported. Use EPP instead.</p></li></ul><p class="- topic/p "> You should be aware of some other <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> behaviors in plans:</p><ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p ">The <codeph translate="no" class="+ topic/ph pr-d/codeph ">--strict_variables</codeph> option is on, so if you reference a variable that is not set, you get an error.</p></li><li class="- topic/li "><p class="- topic/p "> <codeph translate="no" class="+ topic/ph pr-d/codeph ">--strict=error</codeph> is always on, so minor language issues generate errors. For example <codeph translate="no" class="+ topic/ph pr-d/codeph ">{ a =&gt; 10, a =&gt; 20 }</codeph> is an error because there is a duplicate key in the hash.</p></li><li class="- topic/li "><p class="- topic/p ">Most <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> settings are empty and not-configurable when using <ph conkeyref="ProductNames/bolt" class="- topic/ph "/>. </p></li><li class="- topic/li "><p class="- topic/p ">Logs include "source location" (file, line) instead of resource type or name.</p></li></ul></conbody></concept>
