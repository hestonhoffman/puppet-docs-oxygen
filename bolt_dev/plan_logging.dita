<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="concept-1852" domains="(topic concept)                            (topic hi-d)                            (topic ut-d)                            (topic indexing-d)                             (topic pr-d)                            (topic sw-d)                            (topic ui-d)   " ditaarch:DITAArchVersion="1.2" class="- topic/topic concept/concept "><title class="- topic/title ">Plan logging</title><shortdesc class="- topic/shortdesc ">Set up log files to record certain events that occur when you run plans. </shortdesc><prolog class="- topic/prolog "><author type="creator" translate="no" class="- topic/author ">Kate Lopresti &lt;kate.lopresti@puppet.com&gt;</author></prolog><conbody class="- topic/body  concept/conbody "><section class="- topic/section "><title class="- topic/title "> <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> log functions</title><p class="- topic/p ">To generate log messages from a plan, use the <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> log function that corresponds to the level you want to track: <codeph translate="no" class="+ topic/ph pr-d/codeph ">error</codeph>,&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">warn</codeph>,&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">notice</codeph>,&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">info</codeph>, or&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">debug</codeph>. The default log level for <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> is&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">notice</codeph>&#160;but you can set it to&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">info</codeph>&#160;with the&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">--verbose&#160;</codeph>flag or&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">debug</codeph>&#160;with the&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">--debug</codeph>&#160;flag.</p></section><section class="- topic/section "><title class="- topic/title ">Default action logging</title><p class="- topic/p "> <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> logs actions that a plan takes on targets through the &#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">upload_file</codeph>, &#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">run_command</codeph>, <codeph translate="no" class="+ topic/ph pr-d/codeph ">run_script</codeph>, or&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">run_task</codeph>&#160; functions. By default it logs a&#160;notice&#160;level message when an action starts and another when it completes. If you pass a description to the function, that is used in place of the generic log message.</p><codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">run_task(my_task, $targets, "Better description", param1 =&gt; "val")</codeblock><p class="- topic/p ">If your plan contains many small actions you may want to suppress these messages and use explicit calls to the <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> log functions instead. This can be accomplished by wrapping actions in a&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">without_default_logging</codeph>&#160;block which causes the action messages to be logged at&#160;info&#160;level instead of&#160;notice. For example to loop over a series of nodes without logging each action.</p><codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">plan deploy( TargetSpec $nodes) {
  without_default_logging() || {
    get_targets($nodes).each |$node| {
      run_task(deploy, $node)
    }
  }
}
</codeblock><p class="- topic/p ">To avoid complications with parser ambiguity, always call&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">without_default_logging</codeph>&#160;with&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">()</codeph>&#160;and empty block args&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">||</codeph>.</p><codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">without_default_logging() || { run_command('echo hi', $nodes) }</codeblock><p class="- topic/p ">not</p><codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">without_default_logging { run_command('echo hi', $nodes) }</codeblock></section><section class="- topic/section "><title class="- topic/title ">puppetdb_query</title><p class="- topic/p "> <draft-comment author="Kate Lopresti" translate="no" class="- topic/draft-comment ">TODO where should this go?</draft-comment> </p><p class="- topic/p ">You can use the&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">puppetdb_query</codeph> function in plans to make direct queries to <ph conkeyref="ProductNames/puppetdb" class="- topic/ph "/>. For example you can discover nodes from <ph conkeyref="ProductNames/puppetdb" class="- topic/ph "/> and then run tasks on them. You'll have to configure the <xref href="bolt_connect_puppetdb.dita" class="- topic/xref ">puppetdb client </xref>before running it.</p><codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">plan pdb_discover {
  $result = puppetdb_query("inventory[certname] { app_role == 'web_server' }")
  # extract the certnames into an array
  $names = $result.map |$r| { $r["certname"] }
  # wrap in url. You can skip this if the default transport is pcp
  $nodes = $names.map |$n| { "pcp://${n}" }
  run_task('my_task', $nodes)
}</codeblock></section></conbody></concept>
