<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="concept-4926" domains="(topic concept)                            (topic hi-d)                            (topic ut-d)                            (topic indexing-d)                             (topic pr-d)                            (topic sw-d)                            (topic ui-d)   " ditaarch:DITAArchVersion="1.2" class="- topic/topic concept/concept "><title class="- topic/title ">Applying manifest blocks</title><shortdesc class="- topic/shortdesc ">Within a plan, you can use <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> to apply blocks of
                           <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> code (manifest
                  blocks) to remote nodes.&#160; </shortdesc><prolog class="- topic/prolog "><author type="creator" translate="no" class="- topic/author ">Kate Lopresti
                           &lt;kate.lopresti@puppet.com&gt;</author></prolog><conbody class="- topic/body  concept/conbody "><p class="- topic/p ">Similar to the <codeph translate="no" class="+ topic/ph pr-d/codeph ">puppet apply</codeph> command,
                           which applies a standalone <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> manifest to a local system, the <ph conkeyref="ProductNames/bolt" class="- topic/ph "/>
                                    <codeph translate="no" class="+ topic/ph pr-d/codeph ">apply</codeph> command leverages manifest blocks to pass code
                           to remote nodes from the command line. You can create manifest blocks
                           that use existing content from the <ph conkeyref="ProductNames/forge" class="- topic/ph "/>, or mix declarative resource
                           configuration via manifest blocks with procedural orchestration and
                           action in a plan. Most features of the <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> language
                           are available in a manifest block: classes, custom resource types, and
                           functions. For information about what language features aren't supported, see <xref href="manifest_blocks_limitations.dita" class="- topic/xref "/>. </p><note type="tip" id="note-1538001431736" class="- topic/note ">If you installed
                                    <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> as a <ph conkeyref="ProductNames/ruby" class="- topic/ph "/> gem, make
                           sure you have installed the core modules required to use the <codeph translate="no" class="+ topic/ph pr-d/codeph ">puppet
                                    apply</codeph> command. These modules are listed in the <xref href="https://github.com/puppetlabs/bolt/blob/master/Puppetfile" format="html" scope="external" class="- topic/xref "><ph conkeyref="ProductNames/bolt" class="- topic/ph "/> GitHub repository </xref>and you
                           can install them using a Puppetfile.</note></conbody></concept>
