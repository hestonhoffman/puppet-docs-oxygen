<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="concept-8341" domains="(topic concept)                            (topic hi-d)                            (topic ut-d)                            (topic indexing-d)                             (topic pr-d)                            (topic sw-d)                            (topic ui-d)   " ditaarch:DITAArchVersion="1.2" class="- topic/topic concept/concept "><title class="- topic/title ">Writing tasks</title><shortdesc class="- topic/shortdesc ">Tasks are similar to scripts, but they are kept in modules and can have metadata. This allows you to reuse and share them.</shortdesc><prolog class="- topic/prolog "><author type="creator" translate="no" class="- topic/author ">Jean Bond &lt;jean@puppet.com&gt;</author></prolog><conbody class="- topic/body  concept/conbody "><note type="note" class="- topic/note ">This information about writing tasks applies for both <ph conkeyref="ProductNames/pe_long" class="- topic/ph "/> an<?sourceCodeRangeStart?><?sourceCodeRangeEnd?>d <ph conkeyref="ProductNames/bolt" class="- topic/ph "/>. </note><p class="- topic/p ">You can write tasks in any programming language the target nodes will run, such as Bash, <ph conkeyref="ProductNames/powershell" class="- topic/ph "/>, or Python. A task can even be a compiled binary that runs on the target. Place your task in the <codeph translate="no" class="+ topic/ph pr-d/codeph ">./tasks</codeph> directory of a module and add a metadata file to describe parameters and configure task behavior.</p><p class="- topic/p ">For a task to run on remote <ph conkeyref="ProductNames/nix" class="- topic/ph "/> systems, it must include a shebang (<codeph translate="no" class="+ topic/ph pr-d/codeph ">#!</codeph>) line at the top of the file to specify the interpreter.</p><p class="- topic/p "> For example, the <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> <codeph translate="no" class="+ topic/ph pr-d/codeph ">mysql::sql</codeph> task is written in <ph conkeyref="ProductNames/ruby" class="- topic/ph "/> and provides the path to the <ph conkeyref="ProductNames/ruby" class="- topic/ph "/> interpreter. This example also accepts several parameters as JSON on <codeph translate="no" class="+ topic/ph pr-d/codeph ">stdin</codeph> and returns an error.</p><p class="- topic/p "><codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">#!/opt/puppetlabs/puppet/bin/ruby
require 'json'
require 'open3'
require 'puppet'

def get(sql, database, user, password)
  cmd = ['mysql', '-e', "#{sql} "]
  cmd &lt;&lt; "--database=#{database}" unless database.nil?
  cmd &lt;&lt; "--user=#{user}" unless user.nil?
  cmd &lt;&lt; "--password=#{password}" unless password.nil?
  stdout, stderr, status = Open3.capture3(*cmd) # rubocop:disable Lint/UselessAssignment
  raise Puppet::Error, _("stderr: ' %{stderr}') % { stderr: stderr }") if status != 0
  { status: stdout.strip }
end

params = JSON.parse(STDIN.read)
database = params['database']
user = params['user']
password = params['password']
sql = params['sql']

begin
  result = get(sql, database, user, password)
  puts result.to_json
  exit 0
rescue Puppet::Error =&gt; e
  puts({ status: 'failure', error: e.message }.to_json)
  exit 1
end</codeblock></p></conbody></concept>
