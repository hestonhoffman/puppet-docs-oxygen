<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="bolt_functions" class="- topic/topic "><title class="- topic/title ">Bolt functions</title><body class="- topic/body "><draft-comment translate="no" class="- topic/draft-comment ">This content is from REFERENCE.MD, a file created by running the command <codeph class="+ topic/ph pr-d/codeph ">rake docs</codeph> against the Bolt GitHub repository</draft-comment></body><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="add_facts" class="- topic/topic "><title class="- topic/title ">add_facts</title><body class="- topic/body "><p class="- topic/p ">Deep merges a hash of facts with the existing facts on a target.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">add_facts(Target $target, Hash $facts)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">Hash[String, Data]</codeph> The target's new facts.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">target</b><codeph class="+ topic/ph pr-d/codeph ">Target</codeph> A target.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">facts</b><codeph class="+ topic/ph pr-d/codeph ">Hash</codeph> A hash of fact names to values that may include structured facts.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Adding facts to a target</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">add_facts($target, { 'os' =&gt; { 'family' =&gt; 'windows', 'name' =&gt; 'windows' } })</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="add_to_group" class="- topic/topic "><title class="- topic/title ">add_to_group</title><body class="- topic/body "><p class="- topic/p ">Adds a target to specified inventory group.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">add_to_group(Boltlib::TargetSpec $targets, String[1] $group)</codeblock><p class="- topic/p ">
            <i class="+ topic/ph hi-d/i ">Returns:</i>
            <codeph class="+ topic/ph pr-d/codeph ">Any</codeph>
         </p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">targets</b><codeph class="+ topic/ph pr-d/codeph ">Boltlib::TargetSpec</codeph> A pattern or array of patterns identifying a set of targets.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">group</b><codeph class="+ topic/ph pr-d/codeph ">String[1]</codeph> The name of the group to add targets to.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Add new target to group.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">Target.new('foo@example.com', 'password' =&gt; 'secret').add_to_group('group1')</codeblock><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Add new target to group by name.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">add_to_group('bolt:bolt@web.com', 'group1')</codeblock><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Add an array of targets to group by name.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">add_to_group(['host1', 'group1', 'winrm://host2:54321'], 'group1')</codeblock><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Add a comma-separated list list of targets to group by name.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">add_to_group('foo,bar,baz', 'group1')</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="apply_prep" class="- topic/topic "><title class="- topic/title ">apply_prep</title><body class="- topic/body "><p class="- topic/p ">Installs the puppet-agent package on targets, if needed, then collects facts, including any custom
           facts found in the 

            

            <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> modulepath.</p><p class="- topic/p ">Agent detection is skipped if the target includes the <codeph class="+ topic/ph pr-d/codeph ">puppet-agent</codeph> feature, either as a
  property of its transport (PCP) or by explicitly setting it as a feature in the 

            

            <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> inventory.</p><p class="- topic/p ">If no agent is detected on the target using the <codeph class="+ topic/ph pr-d/codeph ">puppet_agent::version</codeph> task, it's installed
using <codeph class="+ topic/ph pr-d/codeph ">puppet_agent::install</codeph> and the puppet service is stopped/disabled using the <codeph class="+ topic/ph pr-d/codeph ">service</codeph> task.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">apply_prep(Boltlib::TargetSpec $targets)</codeblock><p class="- topic/p ">
            <i class="+ topic/ph hi-d/i ">Returns:</i>
            <codeph class="+ topic/ph pr-d/codeph ">Any</codeph>
         </p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">targets</b><codeph class="+ topic/ph pr-d/codeph ">Boltlib::TargetSpec</codeph> A pattern or array of patterns identifying a set of targets.
            </li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Prepare targets by name.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">apply_prep('target1,target2')</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="ctrldo_until" class="- topic/topic "><title class="- topic/title ">ctrl::do_until</title><body class="- topic/body "><p class="- topic/p ">Repeat the block until it returns a truthy value. Returns the value.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">ctrl::do_until(Callable &amp;$block)</codeblock><p class="- topic/p ">
            <i class="+ topic/ph hi-d/i ">Returns:</i>
            <codeph class="+ topic/ph pr-d/codeph ">Any</codeph>
         </p><ul class="- topic/ul "><li class="- topic/li ">
               <b class="+ topic/ph hi-d/b ">block</b>
               <codeph class="+ topic/ph pr-d/codeph ">Callable</codeph>
            </li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Run a task until it succeeds</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">ctrl::do_until() || {
  run_task('test', $target, _catch_errors =&gt; true).ok?
}</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="ctrlsleep" class="- topic/topic "><title class="- topic/title ">ctrl::sleep</title><body class="- topic/body "><p class="- topic/p ">Sleeps for specified number of seconds.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">ctrl::sleep(Numeric $period)</codeblock><p class="- topic/p ">
            <i class="+ topic/ph hi-d/i ">Returns:</i>
            <codeph class="+ topic/ph pr-d/codeph ">Undef</codeph>
         </p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">period</b><codeph class="+ topic/ph pr-d/codeph ">Numeric</codeph> time to sleep (in seconds)
            </li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Sleep for 5 seconds</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">ctrl::sleep(5)</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="facts" class="- topic/topic "><title class="- topic/title ">facts</title><body class="- topic/body "><p class="- topic/p ">Returns the facts hash for a target.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">facts(Target $target)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">Hash[String, Data]</codeph> The target's facts.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">target</b><codeph class="+ topic/ph pr-d/codeph ">Target</codeph> A target.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Getting facts</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">facts($target)</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="fail_plan" class="- topic/topic "><title class="- topic/title ">fail_plan</title><body class="- topic/body "><p class="- topic/p ">Raises a Bolt::PlanFailure exception to signal to callers that the plan failed.</p><p class="- topic/p ">Plan authors should call this function when their plan is not successful. The error may then be caught by another plans run_plan function or in bolt itself</p></body><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="fail_a_plan_generating_an_exception_from_the_parameters" class="- topic/topic "><title class="- topic/title ">Fail a plan, generating an exception from the parameters.</title><body class="- topic/body "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">fail_plan(String[1] $msg, Optional[String[1]] $kind, Optional[Hash[String[1], Any]] $details, Optional[String[1]] $issue_code)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">Any</codeph> Raises an exception.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">msg</b><codeph class="+ topic/ph pr-d/codeph ">String[1]</codeph> An error message.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">kind</b><codeph class="+ topic/ph pr-d/codeph ">Optional[String[1]]</codeph> An easily matchable error kind.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">details</b><codeph class="+ topic/ph pr-d/codeph ">Optional[Hash[String[1], Any]]</codeph> Machine-parseable details about the error.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">issue_code</b><codeph class="+ topic/ph pr-d/codeph ">Optional[String[1]]</codeph> Unused.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Raise an exception</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">fail_plan('We goofed up', 'task-unexpected-result', { 'result' =&gt; 'null' })</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="fail_a_plan_generating_an_exception_from_an_existing_error_object" class="- topic/topic "><title class="- topic/title ">Fail a plan, generating an exception from an existing Error object.</title><body class="- topic/body "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">fail_plan(Error $error)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">Any</codeph> Raises an exception.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">error</b><codeph class="+ topic/ph pr-d/codeph ">Error</codeph> An error object.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Raise an exception</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">fail_plan(Error('We goofed up', 'task-unexpected-result', { 'result' =&gt; 'null' }))</codeblock></body></topic></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="fileread" class="- topic/topic "><title class="- topic/title ">file::read</title><body class="- topic/body "><p class="- topic/p ">Read a file and return its contents.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">file::read(String $filename)</codeblock><p class="- topic/p ">
            <i class="+ topic/ph hi-d/i ">Returns:</i>
            <codeph class="+ topic/ph pr-d/codeph ">String</codeph>
         </p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">filename</b><codeph class="+ topic/ph pr-d/codeph ">String</codeph> Absolute path or 

               

               

               

               <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> file path.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Read a file from disk</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">file::read('/tmp/i_dumped_this_here')</codeblock><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Read a file from the modulepath</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">file::read('example/files/VERSION')</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="filewrite" class="- topic/topic "><title class="- topic/title ">file::write</title><body class="- topic/body "><p class="- topic/p ">Write a string to a file.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">file::write(String $filename, String $content)</codeblock><p class="- topic/p ">
            <i class="+ topic/ph hi-d/i ">Returns:</i>
            <codeph class="+ topic/ph pr-d/codeph ">Undef</codeph>
         </p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">filename</b><codeph class="+ topic/ph pr-d/codeph ">String</codeph> Absolute path.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">content</b><codeph class="+ topic/ph pr-d/codeph ">String</codeph> File content to write.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Write a file to disk</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">file::write('C:/Users/me/report', $apply_result.first.report)</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="get_resources" class="- topic/topic "><title class="- topic/title ">get_resources</title><body class="- topic/body "><p class="- topic/p ">Query the state of resources on a list of targets using resource definitions in the 

            

            

            

            <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> module path.
The results are returned as a list of hashes representing each resource.

</p><p class="- topic/p ">The 

            

            

            

            <ph conkeyref="ProductNames/puppet" class="- topic/ph "/> agent must be installed on the target. You can install the agent with the<codeph class="+ topic/ph pr-d/codeph "> apply_prep</codeph>
function or by directly running the <codeph class="+ topic/ph pr-d/codeph ">puppet_agent::install</codeph> task.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">get_resources(Boltlib::TargetSpec $targets, Variant[String, Resource, Array[Variant[String, Resource]]] $resources)</codeblock><p class="- topic/p ">
            <i class="+ topic/ph hi-d/i ">Returns:</i>
            <codeph class="+ topic/ph pr-d/codeph ">Any</codeph>
         </p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">targets</b><codeph class="+ topic/ph pr-d/codeph ">Boltlib::TargetSpec</codeph> A pattern or array of patterns identifying a set of targets.</li><li class="- topic/li ">
               <p class="- topic/p "><b class="+ topic/ph hi-d/b ">resources</b><codeph class="+ topic/ph pr-d/codeph ">Variant[String, Resource, Array[Variant[String, Resource]]]</codeph> A resource type or instance, or an array of such.</p>
            </li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Collect resource states for packages and a file</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">get_resources('target1,target2', [Package, File[/etc/puppetlabs]])</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="get_targets" class="- topic/topic "><title class="- topic/title ">get_targets</title><body class="- topic/body "><p class="- topic/p ">Parses common ways of referring to targets and returns an array of Targets.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">get_targets(Boltlib::TargetSpec $names)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">Array[Target]</codeph> A list of unique Targets resolved from any target URIs and groups.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">names</b><codeph class="+ topic/ph pr-d/codeph ">Boltlib::TargetSpec</codeph> A pattern or array of patterns identifying a set of targets.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Resolve a group</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">get_targets('group1')</codeblock><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Resolve a target URI</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">get_targets('winrm://host2:54321')</codeblock><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Resolve array of groups and/or target URIs</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">get_targets(['host1', 'group1', 'winrm://host2:54321'])</codeblock><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Resolve string consisting of a comma-separated list of groups and/or target URIs</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">get_targets('host1,group1,winrm://host2:54321')</codeblock><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Run on localhost</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">get_targets('localhost')</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="puppetdb_fact" class="- topic/topic "><title class="- topic/title ">puppetdb_fact</title><body class="- topic/body "><p class="- topic/p ">Collects facts based on a list of certnames.</p><ul class="- topic/ul "><li class="- topic/li ">If a node is not found in PuppetDB, it's included in the returned hash with empty facts hash.</li><li class="- topic/li ">Otherwise the node is included in the hash with a value that is a hash of it's facts.</li></ul><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">puppetdb_fact(Array[String] $certnames)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">Hash[String, Data]</codeph> A hash of certname to facts hash for each matched Target.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">certnames</b><codeph class="+ topic/ph pr-d/codeph ">Array[String]</codeph> Array of certnames.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Get facts for nodes</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">puppetdb_fact(['app.example.com', 'db.example.com'])</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="puppetdb_query" class="- topic/topic "><title class="- topic/title ">puppetdb_query</title><body class="- topic/body "><p class="- topic/p ">Makes a query to PuppetDB using Bolt's PuppetDB client.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">puppetdb_query(Variant[String, Array[Data]] $query)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">Array[Data]</codeph> Results of the PuppetDB query.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">query</b><codeph class="+ topic/ph pr-d/codeph ">Variant[String, Array[Data]]</codeph> A PQL query.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Request certnames for all nodes</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">puppetdb_query('nodes[certname] {}')</codeblock></body><related-links class="- topic/related-links "><link format="html" href="https://puppet.com/docs/puppetdb/latest/index.html" scope="external" class="- topic/link "><linktext class="- topic/linktext ">PuppetDB</linktext></link><link format="html" href="https://puppet.com/docs/puppetdb/latest/api/query/tutorial-pql.html" scope="external" class="- topic/link "><linktext class="- topic/linktext ">Puppet Query Language</linktext></link></related-links></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="run_command" class="- topic/topic "><title class="- topic/title ">run_command</title><body class="- topic/body "><p class="- topic/p ">Runs a command on the given set of targets and returns the result from each command execution. This function does nothing if the list of targets is empty.</p></body><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="run_a_command" class="- topic/topic "><title class="- topic/title ">Run a command.</title><body class="- topic/body "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">run_command(String[1] $command, Boltlib::TargetSpec $targets, Optional[Hash[String[1], Any]] $options)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">ResultSet</codeph> A list of results, one entry per target.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">command</b><codeph class="+ topic/ph pr-d/codeph ">String[1]</codeph> A command to run on target.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">targets</b><codeph class="+ topic/ph pr-d/codeph ">Boltlib::TargetSpec</codeph> A pattern identifying zero or more targets. See 

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  <xref format="html" href="#get_targets" class="- topic/xref ">
                     <codeph class="+ topic/ph pr-d/codeph ">get_targets</codeph>
                  </xref> for accepted patterns.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">options</b><codeph class="+ topic/ph pr-d/codeph ">Optional[Hash[String[1], Any]]</codeph> Additional options: '_catch_errors', '_run_as'.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Run a command on targets</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">run_command('hostname', $targets, '_catch_errors' =&gt; true)</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="run_a_command_logging_the_provided_description" class="- topic/topic "><title class="- topic/title ">Run a command, logging the provided description.</title><body class="- topic/body "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">run_command(String[1] $command, Boltlib::TargetSpec $targets, String $description, Optional[Hash[String[1], Any]] $options)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">ResultSet</codeph> A list of results, one entry per target.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">command</b><codeph class="+ topic/ph pr-d/codeph ">String[1]</codeph> A command to run on target.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">targets</b><codeph class="+ topic/ph pr-d/codeph ">Boltlib::TargetSpec</codeph> A pattern identifying zero or more targets. See 

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  <xref format="html" href="#get_targets" class="- topic/xref ">
                     <codeph class="+ topic/ph pr-d/codeph ">get_targets</codeph>
                  </xref> for accepted patterns.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">description</b><codeph class="+ topic/ph pr-d/codeph ">String</codeph> A description to be output when calling this function.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">options</b><codeph class="+ topic/ph pr-d/codeph ">Optional[Hash[String[1], Any]]</codeph> Additional options: '_catch_errors', '_run_as'.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Run a command on targets</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">run_command('hostname', $targets, '_catch_errors' =&gt; true)</codeblock></body></topic></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="run_plan" class="- topic/topic "><title class="- topic/title ">run_plan</title><body class="- topic/body "><p class="- topic/p ">Runs the <codeph class="+ topic/ph pr-d/codeph ">plan</codeph> referenced by its name. A plan is autoloaded from <codeph class="+ topic/ph pr-d/codeph ">&lt;moduleroot&gt;/plans</codeph>.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">run_plan(String $plan_name, Optional[Hash] $named_args)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">Boltlib::PlanResult</codeph> The result of running the plan. Undef if plan does not explicitly return results.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">plan_name</b><codeph class="+ topic/ph pr-d/codeph ">String</codeph> The plan to run.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">named_args</b><codeph class="+ topic/ph pr-d/codeph ">Optional[Hash]</codeph> Arguments to the plan. Can also include additional options: '_catch_errors', '_run_as'.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Run a plan</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">run_plan('canary', 'command' =&gt; 'false', 'nodes' =&gt; $targets, '_catch_errors' =&gt; true)</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="run_script" class="- topic/topic "><title class="- topic/title ">run_script</title><body class="- topic/body "><p class="- topic/p ">Uploads the given script to the given set of targets and returns the result of having each target execute the script. This function does nothing if the list of targets is empty.</p></body><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="run_a_script" class="- topic/topic "><title class="- topic/title ">Run a script.</title><body class="- topic/body "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">run_script(String[1] $script, Boltlib::TargetSpec $targets, Optional[Hash[String[1], Any]] $options)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">ResultSet</codeph> A list of results, one entry per target.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">script</b><codeph class="+ topic/ph pr-d/codeph ">String[1]</codeph> Path to a script to run on target. May be an absolute path or a modulename/filename selector for a file in &lt;moduleroot&gt;/files.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">targets</b><codeph class="+ topic/ph pr-d/codeph ">Boltlib::TargetSpec</codeph> A pattern identifying zero or more targets. See 

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  <xref format="html" href="#get_targets" class="- topic/xref ">
                     <codeph class="+ topic/ph pr-d/codeph ">get_targets</codeph>
                  </xref> for accepted patterns.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">options</b><codeph class="+ topic/ph pr-d/codeph ">Optional[Hash[String[1], Any]]</codeph> Specify an array of arguments to the 'arguments' key to be passed to the script. Additional options: '_catch_errors', '_run_as'.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Run a local script on Linux targets as 'root'</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">run_script('/var/tmp/myscript', $targets, '_run_as' =&gt; 'root')</codeblock><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Run a module-provided script with arguments</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">run_script('iis/setup.ps1', $target, 'arguments' =&gt; ['/u', 'Administrator'])</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="run_a_script_logging_the_provided_description" class="- topic/topic "><title class="- topic/title ">Run a script, logging the provided description.</title><body class="- topic/body "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">run_script(String[1] $script, Boltlib::TargetSpec $targets, String $description, Optional[Hash[String[1], Any]] $options)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">ResultSet</codeph> A list of results, one entry per target.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">script</b><codeph class="+ topic/ph pr-d/codeph ">String[1]</codeph> Path to a script to run on target. May be an absolute path or a modulename/filename selector for a file in &lt;moduleroot&gt;/files.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">targets</b><codeph class="+ topic/ph pr-d/codeph ">Boltlib::TargetSpec</codeph> A pattern identifying zero or more targets. See 

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  <xref format="html" href="#get_targets" class="- topic/xref ">
                     <codeph class="+ topic/ph pr-d/codeph ">get_targets</codeph>
                  </xref> for accepted patterns.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">description</b><codeph class="+ topic/ph pr-d/codeph ">String</codeph> A description to be output when calling this function.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">options</b><codeph class="+ topic/ph pr-d/codeph ">Optional[Hash[String[1], Any]]</codeph> Specify an array of arguments to the 'arguments' key to be passed to the script. Additional options: '_catch_errors', '_run_as'.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Run a script</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">run_script('/var/tmp/myscript', $targets, 'Downloading my application')</codeblock></body></topic></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="run_task" class="- topic/topic "><title class="- topic/title ">run_task</title><body class="- topic/body "><p class="- topic/p ">Runs a given instance of a <codeph class="+ topic/ph pr-d/codeph ">Task</codeph> on the given set of targets and returns the result from each. This function does nothing if the list of targets is empty.</p></body><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="run_a_task" class="- topic/topic "><title class="- topic/title ">Run a task.</title><body class="- topic/body "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">run_task(String[1] $task_name, Boltlib::TargetSpec $targets, Optional[Hash[String[1], Any]] $task_args)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">ResultSet</codeph> A list of results, one entry per target.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">task_name</b><codeph class="+ topic/ph pr-d/codeph ">String[1]</codeph> The task to run.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">targets</b><codeph class="+ topic/ph pr-d/codeph ">Boltlib::TargetSpec</codeph> A pattern identifying zero or more targets. See 

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  <xref format="html" href="#get_targets" class="- topic/xref ">
                     <codeph class="+ topic/ph pr-d/codeph ">get_targets</codeph>
                  </xref> for accepted patterns.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">task_args</b><codeph class="+ topic/ph pr-d/codeph ">Optional[Hash[String[1], Any]]</codeph> Arguments to the plan. Can also include additional options: '_catch_errors', '_run_as'.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Run a task as root</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">run_task('facts', $targets, '_run_as' =&gt; 'root')</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="run_a_task_logging_the_provided_description" class="- topic/topic "><title class="- topic/title ">Run a task, logging the provided description.</title><body class="- topic/body "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">run_task(String[1] $task_name, Boltlib::TargetSpec $targets, String $description, Optional[Hash[String[1], Any]] $task_args)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">ResultSet</codeph> A list of results, one entry per target.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">task_name</b><codeph class="+ topic/ph pr-d/codeph ">String[1]</codeph> The task to run.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">targets</b><codeph class="+ topic/ph pr-d/codeph ">Boltlib::TargetSpec</codeph> A pattern identifying zero or more targets. See 

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  <xref format="html" href="#get_targets" class="- topic/xref ">
                     <codeph class="+ topic/ph pr-d/codeph ">get_targets</codeph>
                  </xref> for accepted patterns.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">description</b><codeph class="+ topic/ph pr-d/codeph ">String</codeph> A description to be output when calling this function.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">task_args</b><codeph class="+ topic/ph pr-d/codeph ">Optional[Hash[String[1], Any]]</codeph> Arguments to the plan. Can also include additional options: '_catch_errors', '_run_as'.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Run a task</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">run_task('facts', $targets, 'Gather OS facts')</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="run_a_task_calling_the_block_as_each_node_starts_and_finishes_execution_this_is_used_from_bolt_task_run" class="- topic/topic "><title class="- topic/title ">Run a task, calling the block as each node starts and finishes execution. This is used from 'bolt task run'</title><body class="- topic/body "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">run_task(String[1] $task_name, Boltlib::TargetSpec $targets, Optional[String] $description, Optional[Hash[String[1], Any]] $task_args, Callable[Struct[{type =&gt; Enum[node_start, node_result], target =&gt; Target}], 1, 1] &amp;$block)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">ResultSet</codeph> A list of results, one entry per target.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">task_name</b><codeph class="+ topic/ph pr-d/codeph ">String[1]</codeph> The task to run.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">targets</b><codeph class="+ topic/ph pr-d/codeph ">Boltlib::TargetSpec</codeph> A pattern identifying zero or more targets. See 

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  <xref format="html" href="#get_targets" class="- topic/xref ">
                     <codeph class="+ topic/ph pr-d/codeph ">get_targets</codeph>
                  </xref> for accepted patterns.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">description</b><codeph class="+ topic/ph pr-d/codeph ">Optional[String]</codeph> A description to be output when calling this function.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">task_args</b><codeph class="+ topic/ph pr-d/codeph ">Optional[Hash[String[1], Any]]</codeph> Arguments to the plan. Can also include additional options: '_catch_errors', '_run_as'.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">&amp;block</b><codeph class="+ topic/ph pr-d/codeph ">Callable[Struct[{type =&gt; Enum[node_start, node_result], target =&gt; Target}], 1, 1]</codeph> A block that's invoked as actions are started and finished on each node.</li></ul></body></topic></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="set_feature" class="- topic/topic "><title class="- topic/title ">set_feature</title><body class="- topic/body "><p class="- topic/p ">Sets a particular feature to present on a target.</p><p class="- topic/p ">Features are used to determine what implementation of a task should be run. Currently supported features are - powershell - shell - puppet-agent</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">set_feature(Target $target, String $feature, Optional[Boolean] $value)</codeblock><p class="- topic/p ">
            <i class="+ topic/ph hi-d/i ">Returns:</i>
            <codeph class="+ topic/ph pr-d/codeph ">Undef</codeph>
         </p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">target</b><codeph class="+ topic/ph pr-d/codeph ">Target</codeph> The Target object to add features to. See 

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               <xref format="html" href="#get_targets" class="- topic/xref ">
                  <codeph class="+ topic/ph pr-d/codeph ">get_targets</codeph>
               </xref>.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">feature</b><codeph class="+ topic/ph pr-d/codeph ">String</codeph> The string identifying the feature.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">value</b><codeph class="+ topic/ph pr-d/codeph ">Optional[Boolean]</codeph> Whether the feature is supported.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Add the puppet-agent feature to a target</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">set_feature($target, 'puppet-agent', true)</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="set_var" class="- topic/topic "><title class="- topic/title ">set_var</title><body class="- topic/body "><p class="- topic/p ">Sets a variable { key =&gt; value } for a target.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">set_var(Target $target, String $key, Data $value)</codeblock><p class="- topic/p ">
            <i class="+ topic/ph hi-d/i ">Returns:</i>
            <codeph class="+ topic/ph pr-d/codeph ">Undef</codeph>
         </p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">target</b><codeph class="+ topic/ph pr-d/codeph ">Target</codeph> The Target object to set the variable for. See 

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               <xref format="html" href="#get_targets" class="- topic/xref ">
                  <codeph class="+ topic/ph pr-d/codeph ">get_targets</codeph>
               </xref>.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">key</b><codeph class="+ topic/ph pr-d/codeph ">String</codeph> The key for the variable.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">value</b><codeph class="+ topic/ph pr-d/codeph ">Data</codeph> The value of the variable.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Set a variable on a target</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">$target.set_var('ephemeral', true)</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="systemenv" class="- topic/topic "><title class="- topic/title ">system::env</title><body class="- topic/body "><p class="- topic/p ">Get an environment variable.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">system::env(String $name)</codeblock><p class="- topic/p ">
            <i class="+ topic/ph hi-d/i ">Returns:</i>
            <codeph class="+ topic/ph pr-d/codeph ">String</codeph>
         </p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">name</b><codeph class="+ topic/ph pr-d/codeph ">String</codeph> Environment variable name.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Get the USER environment variable</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">system::env('USER')</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="upload_file" class="- topic/topic "><title class="- topic/title ">upload_file</title><body class="- topic/body "><p class="- topic/p ">Uploads the given file or directory to the given set of targets and returns the result from each upload. This function does nothing if the list of targets is empty.</p></body><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="upload_a_file" class="- topic/topic "><title class="- topic/title ">Upload a file.</title><body class="- topic/body "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">upload_file(String[1] $source, String[1] $destination, Boltlib::TargetSpec $targets, Optional[Hash[String[1], Any]] $options)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">ResultSet</codeph> A list of results, one entry per target.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">source</b><codeph class="+ topic/ph pr-d/codeph ">String[1]</codeph> A source path, either an absolute path or a modulename/filename selector for a file in &lt;moduleroot&gt;/files.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">destination</b><codeph class="+ topic/ph pr-d/codeph ">String[1]</codeph> An absolute path on the target(s).</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">targets</b><codeph class="+ topic/ph pr-d/codeph ">Boltlib::TargetSpec</codeph> A pattern identifying zero or more targets. See 

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  <xref format="html" href="#get_targets" class="- topic/xref ">
                     <codeph class="+ topic/ph pr-d/codeph ">get_targets</codeph>
                  </xref> for accepted patterns.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">options</b><codeph class="+ topic/ph pr-d/codeph ">Optional[Hash[String[1], Any]]</codeph> Additional options: '_catch_errors', '_run_as'.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Upload a local file to Linux targets and change owner to 'root'</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">upload_file('/var/tmp/payload.tgz', '/tmp/payload.tgz', $targets, '_run_as' =&gt; 'root')</codeblock><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Upload a module file to a Windows target</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">upload_file('postgres/default.conf', 'C:/ProgramData/postgres/default.conf', $target)</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="upload_a_file_logging_the_provided_description" class="- topic/topic "><title class="- topic/title ">Upload a file, logging the provided description.</title><body class="- topic/body "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">upload_file(String[1] $source, String[1] $destination, Boltlib::TargetSpec $targets, String $description, Optional[Hash[String[1], Any]] $options)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">ResultSet</codeph> A list of results, one entry per target.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">source</b><codeph class="+ topic/ph pr-d/codeph ">String[1]</codeph> A source path, either an absolute path or a modulename/filename selector for a file in &lt;moduleroot&gt;/files.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">destination</b><codeph class="+ topic/ph pr-d/codeph ">String[1]</codeph> An absolute path on the target(s).</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">targets</b><codeph class="+ topic/ph pr-d/codeph ">Boltlib::TargetSpec</codeph> A pattern identifying zero or more targets. See 

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  

                  <xref format="html" href="#get_targets" class="- topic/xref ">
                     <codeph class="+ topic/ph pr-d/codeph ">get_targets</codeph>
                  </xref> for accepted patterns.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">description</b><codeph class="+ topic/ph pr-d/codeph ">String</codeph> A description to be output when calling this function.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">options</b><codeph class="+ topic/ph pr-d/codeph ">Optional[Hash[String[1], Any]]</codeph> Additional options: '_catch_errors', '_run_as'.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Upload a file</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">upload_file('/var/tmp/payload.tgz', '/tmp/payload.tgz', $targets, 'Uploading payload to unpack')</codeblock></body></topic></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="vars" class="- topic/topic "><title class="- topic/title ">vars</title><body class="- topic/body "><p class="- topic/p ">Returns a hash of the 'vars' (variables) assigned to a target.</p><p class="- topic/p ">Vars can be assigned through the inventory file or <codeph class="+ topic/ph pr-d/codeph ">set_var</codeph> function. Plan authors can call this function on a target to get the variable hash for that target.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">vars(Target $target)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">Hash[String, Data]</codeph> A hash of the 'vars' (variables) assigned to a target.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">target</b><codeph class="+ topic/ph pr-d/codeph ">Target</codeph> The Target object to get variables from. See 

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               <xref format="html" href="#get_targets" class="- topic/xref ">
                  <codeph class="+ topic/ph pr-d/codeph ">get_targets</codeph>
               </xref>.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Get vars for a target</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">$target.vars</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="wait_until_available" class="- topic/topic "><title class="- topic/title ">wait_until_available</title><body class="- topic/body "><p class="- topic/p ">Waits until all targets accept connections.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">wait_until_available(Boltlib::TargetSpec $targets, Optional[Hash[String[1], Any]] $options)</codeblock><p class="- topic/p "><i class="+ topic/ph hi-d/i ">Returns:</i><codeph class="+ topic/ph pr-d/codeph ">ResultSet</codeph> A list of results, one entry per target. Successful results have no value.</p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">target</b><codeph class="+ topic/ph pr-d/codeph "> Boltlib::TargetSpec</codeph> A pattern identifying zero or more targets. See 

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               

               <xref format="html" href="#get_targets" class="- topic/xref ">
                  <codeph class="+ topic/ph pr-d/codeph ">get_targets</codeph>
               </xref> for accepted patterns. </li><li class="- topic/li ">
               <p class="- topic/p "><b class="+ topic/ph hi-d/b ">options</b><codeph class="+ topic/ph pr-d/codeph ">Optional[Hash[String[1], Any]] </codeph>Additional options: <codeph class="+ topic/ph pr-d/codeph ">description</codeph>, <codeph class="+ topic/ph pr-d/codeph ">wait_time</codeph>, <codeph class="+ topic/ph pr-d/codeph ">retry_interval</codeph>, <codeph class="+ topic/ph pr-d/codeph ">_catch_errors</codeph>.</p>
            </li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Wait for targets</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">wait_until_available($targets, wait_time =&gt; 300)</codeblock></body></topic><topic ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " id="without_default_logging" class="- topic/topic "><title class="- topic/title ">without_default_logging</title><body class="- topic/body "><p class="- topic/p ">Define a block where default logging is suppressed.</p><p class="- topic/p ">Messages for actions within this block are logged at <codeph class="+ topic/ph pr-d/codeph ">info</codeph> level instead of <codeph class="+ topic/ph pr-d/codeph ">notice</codeph>, so they are not seen normally but # is still present when <codeph class="+ topic/ph pr-d/codeph ">verbose</codeph> logging is requested.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">without_default_logging(Callable[0, 0] &amp;$block)</codeblock><p class="- topic/p ">
            <i class="+ topic/ph hi-d/i ">Returns:</i>
            <codeph class="+ topic/ph pr-d/codeph ">Undef</codeph>
         </p><ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">&amp;block</b><codeph class="+ topic/ph pr-d/codeph ">Callable[0, 0]</codeph> The block where action logging is suppressed.</li></ul><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Example:</b> Suppress default logging for a series of functions</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">without_default_logging() || {
  notice("Deploying on ${nodes}")
  get_targets($nodes).each |$node| {
    run_task(deploy, $node)
  }
}</codeblock></body></topic></topic>
