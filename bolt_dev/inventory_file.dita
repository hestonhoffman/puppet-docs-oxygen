<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="concept-3383" domains="(topic concept)                            (topic hi-d)                            (topic ut-d)                            (topic indexing-d)                             (topic pr-d)                            (topic sw-d)                            (topic ui-d)   " ditaarch:DITAArchVersion="1.2" class="- topic/topic concept/concept "><title class="- topic/title ">Inventory file</title><shortdesc class="- topic/shortdesc ">In <ph conkeyref="ProductNames/bolt" class="- topic/ph "/>, you can use an inventory file to store information about your nodes. For example, you can organize your nodes into groups or set up connection information for nodes or node groups. </shortdesc><prolog class="- topic/prolog "><author type="creator" translate="no" class="- topic/author ">Kate Lopresti &lt;kate.lopresti@puppet.com&gt;</author></prolog><conbody class="- topic/body  concept/conbody "><p class="- topic/p ">The inventory file is a yaml file stored by default at <codeph translate="no" class="+ topic/ph pr-d/codeph ">inventory.yaml</codeph> inside the&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">Boltdir</codeph>. At the top level it contains an array of nodes and groups. Each node can have a config, facts, vars, and features specific to that node. Each group can have an array of nodes and a config hash. node. Each group can have an array of nodes, an array of child groups, and can set default config, vars, and features for the entire group. <note type="note" class="- topic/note ">Configuration values set at the top level of inventory will only apply to targets included in that inventory file. Set values for unknown targets in the <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> configuration file.</note></p><section class="- topic/section "><title class="- topic/title "> Inventory config </title><p class="- topic/p ">You can only set transport configuration in the inventory file. This means using a top level <codeph translate="no" class="+ topic/ph pr-d/codeph ">transport</codeph> value to assign a transport to the target and all values in the section named for the transport (<codeph translate="no" class="+ topic/ph pr-d/codeph ">ssh</codeph>, <codeph translate="no" class="+ topic/ph pr-d/codeph ">winrm</codeph>, <codeph translate="no" class="+ topic/ph pr-d/codeph ">remote</codeph>, etc.). You can set config on nodes or groups in the inventory file. <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> performs a depth first search of nodes, followed by a search of groups, and uses the first value it finds. Nested hashes are merged. </p><p class="- topic/p ">This inventory file example defines two top-level groups:&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">ssh_nodes</codeph>&#160;and&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">win_nodes</codeph>. The&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">ssh_nodes</codeph>&#160;group contains two other groups:&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">webservers</codeph>&#160;and&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">memcached</codeph>. Five nodes are configured to use ssh transport and four other nodes to use WinRM transport.</p><codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">groups:
  - name: ssh_nodes
    groups:
      - name: webservers
        nodes:
          - 192.168.100.179
          - 192.168.100.180
          - 192.168.100.181
      - name: memcached
        nodes:
          - 192.168.101.50
          - 192.168.101.60
        config:
          ssh:
            user: root
    config:
      transport: ssh
      ssh:
        user: centos
        private-key: ~/.ssh/id_rsa
        host-key-check: false
  - name: win_nodes
    groups:
      - name: domaincontrollers
        nodes:
          - 192.168.110.10
          - 192.168.110.20
      - name: testservers
        nodes:
          - 172.16.219.20
          - 172.16.219.30
        config:
          winrm:
            user: vagrant
            password: vagrant
            ssl: false
    config:
      transport: winrm
      winrm:
        user: DOMAIN\opsaccount
        password: S3cretP@ssword
        ssl: true
</codeblock></section><section class="- topic/section "><title class="- topic/title ">Override a user for a specific node</title><p class="- topic/p ">
            <codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">nodes: 
  - name: linux1.example.com
    config: 
      ssh:
        user: me</codeblock>
         </p></section><section class="- topic/section "><title class="- topic/title ">Provide an alias to a node</title><p class="- topic/p ">The inventory can be used to create aliases to refer to a target. Aliases can be useful to refer to nodes with long or complicated names, like <userinput class="+ topic/ph sw-d/userinput ">db.uswest.acme.example.com</userinput>,  or for targets that include protocol or port for uniqueness, such as <userinput class="+ topic/ph sw-d/userinput ">127.0.0.1:2222</userinput> and <userinput class="+ topic/ph sw-d/userinput ">127.0.0.1:2223</userinput>. Aliases can also be useful when generating nodes in a dynamic environment to give generated targets stable names to refer to.</p><p class="- topic/p ">An alias can be a single name or list of names. Each alias must match the regex <codeph translate="no" class="+ topic/ph pr-d/codeph ">/[a-zA-Z]\w+/</codeph>. When using <ph conkeyref="ProductNames/bolt" class="- topic/ph "/>, you may refer to a node by its alias anywhere the node name would be applicable, such as the <codeph translate="no" class="+ topic/ph pr-d/codeph ">--nodes</codeph> command line argument or a <codeph translate="no" class="+ topic/ph pr-d/codeph ">TargetSpec</codeph>.

            <codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">nodes:
  - name: linux1.example.com
    alias: linux1
    config:
      ssh:
        port: 2222</codeblock>Aliases must be unique across the entire inventory. You can use the same alias multiple places, but they must all refer to the same target. Alias names must not match any group or target names used in the inventory.
 </p><p class="- topic/p ">A list of nodes may refer to a node by its alias, for example:

            <codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">nodes:
  - linux1</codeblock></p></section><section class="- topic/section "><title id="title-1541705359297" class="- topic/title ">Inventory facts, vars, and features</title><p class="- topic/p ">In addition to config values you can store information relating to <codeph translate="no" class="+ topic/ph pr-d/codeph ">facts</codeph>, <codeph translate="no" class="+ topic/ph pr-d/codeph ">vars</codeph> and <codeph translate="no" class="+ topic/ph pr-d/codeph ">features</codeph> for nodes in the inventory. <codeph translate="no" class="+ topic/ph pr-d/codeph ">facts</codeph> represent observed information about the node including what can be collected by Facter. <codeph translate="no" class="+ topic/ph pr-d/codeph ">vars</codeph> contain arbitrary data that may be passed to run_* functions or used for logic in plans. <codeph translate="no" class="+ topic/ph pr-d/codeph ">features</codeph>&#160;represent capabilities of the target that can be used to select a specific task implementation.</p><p class="- topic/p ">
            <codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">groups:
  - name: centos_nodes
    nodes:
      - foo.example.com
      - bar.example.com
      - baz.example.com
    facts:
      operatingsystem: CentOS
  - name: production_nodes
    vars:
      environment: production
    features: ['puppet-agent']
</codeblock>
         </p></section><section class="- topic/section "><title class="- topic/title ">Objects</title><p class="- topic/p ">The inventory file uses the following objects.</p><p class="- topic/p ">
            <dl class="- topic/dl "><dlentry class="- topic/dlentry "><dt class="- topic/dt ">Config</dt><dd class="- topic/dd ">A config is a map that contains transport specific configuration options.</dd></dlentry><dlentry class="- topic/dlentry "><dt class="- topic/dt ">Group</dt><dd class="- topic/dd ">
                     <p class="- topic/p ">A group is a map that requires a <codeph translate="no" class="+ topic/ph pr-d/codeph ">name</codeph> and can contain any of the following:</p>

                     <ul class="- topic/ul "><li class="- topic/li ">
                           <p class="- topic/p "><codeph translate="no" class="+ topic/ph pr-d/codeph ">nodes</codeph> : <codeph translate="no" class="+ topic/ph pr-d/codeph ">Array[Node]</codeph></p>
                        </li><li class="- topic/li "><codeph translate="no" class="+ topic/ph pr-d/codeph ">groups</codeph>&#160;: Groups object</li><li class="- topic/li ">
                           <p class="- topic/p "><codeph translate="no" class="+ topic/ph pr-d/codeph ">config</codeph> : Config object</p>
                        </li><li class="- topic/li ">
                           <p class="- topic/p "><codeph translate="no" class="+ topic/ph pr-d/codeph ">facts</codeph> : Facts object</p>
                        </li><li class="- topic/li ">
                           <p class="- topic/p "><codeph translate="no" class="+ topic/ph pr-d/codeph ">vars</codeph> : Vars object</p>
                        </li><li class="- topic/li ">
                           <p class="- topic/p "><codeph translate="no" class="+ topic/ph pr-d/codeph ">features</codeph> : <codeph translate="no" class="+ topic/ph pr-d/codeph ">Array[Feature]</codeph></p>
                        </li></ul>

                     <p class="- topic/p "> A group name must match the regular expression values <codeph translate="no" class="+ topic/ph pr-d/codeph ">/[a-zA-Z]\w+/</codeph>. These are the same values used for environments.</p>

                     <p class="- topic/p ">A group may contain other groups. Any nodes in the nested groups will also be in the parent group. The configuration of nested groups will override the parent group.</p>
                  </dd></dlentry><dlentry class="- topic/dlentry "><dt class="- topic/dt ">Groups</dt><dd class="- topic/dd ">An array of group objects. </dd></dlentry><dlentry class="- topic/dlentry "><dt class="- topic/dt ">Facts</dt><dd class="- topic/dd ">A map of fact names and values. values may include arrays or nested maps.</dd></dlentry><dlentry class="- topic/dlentry "><dt class="- topic/dt ">Feature</dt><dd class="- topic/dd ">A string describing a feature of the target.</dd></dlentry><dlentry class="- topic/dlentry "><dt class="- topic/dt ">Node</dt><dd class="- topic/dd ">A node can be just the string of its node name or a map that requires a name key and can contain a config. For example, a node block can contain any of the following:</dd><dd class="- topic/dd ">
                     <codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">"host1.example.com"</codeblock>
                     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">name: "host1.example.com"</codeblock>
                     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">name: "host1.example.com"
config:
					   transport: "ssh"</codeblock>

                     <p class="- topic/p ">If the node entry is a map, it may contain any of the following:

                        

                        <ul class="- topic/ul "><li class="- topic/li ">
                              <p class="- topic/p "><codeph translate="no" class="+ topic/ph pr-d/codeph ">alias</codeph> : <codeph translate="no" class="+ topic/ph pr-d/codeph ">String</codeph> or <codeph translate="no" class="+ topic/ph pr-d/codeph ">Array[String]</codeph>
                              </p>
                           </li><li class="- topic/li ">
                              <p class="- topic/p "><codeph translate="no" class="+ topic/ph pr-d/codeph ">config</codeph> : Config object
                              
                              </p>
                           </li><li class="- topic/li ">
                              <p class="- topic/p "><codeph translate="no" class="+ topic/ph pr-d/codeph ">facts</codeph> : Facts object
                              
                              </p>
                           </li><li class="- topic/li ">
                              <p class="- topic/p "><codeph translate="no" class="+ topic/ph pr-d/codeph ">vars</codeph> : Vars object
                              
                              </p>
                           </li><li class="- topic/li ">
                              <p class="- topic/p "><codeph translate="no" class="+ topic/ph pr-d/codeph ">features</codeph> : <codeph translate="no" class="+ topic/ph pr-d/codeph ">Array[Feature]</codeph>
                              </p>
                           </li></ul></p>
                  </dd></dlentry><dlentry class="- topic/dlentry "><dt class="- topic/dt ">Node name</dt><dd class="- topic/dd ">The URI used to create the node. </dd></dlentry><dlentry class="- topic/dlentry "><dt class="- topic/dt ">Nodes</dt><dd class="- topic/dd ">An array of node objects.</dd></dlentry><dlentry class="- topic/dlentry "><dt class="- topic/dt ">Vars</dt><dd class="- topic/dd ">A map of value names and values. Values may include arrays or nested maps.</dd></dlentry></dl>
         </p></section><section class="- topic/section "><title class="- topic/title ">File format</title><p class="- topic/p ">The inventory file is a yaml file that contains a single group. This group can be referred to as "all". In addition to the normal group fields, the top level has an inventory file version key that defaults to 1.0.</p></section><section class="- topic/section "><title class="- topic/title ">Precedence</title><p class="- topic/p ">When searching for node config, the URI used to create the target is matched to the node-name. Any URI-based configuration information like host, transport or port will override config values even those defined in the same block. For config values, the first value found for a node is used. Node values take precedence over group values and are searched first. Values are searched for in a depth first order. The first item in an array is searched first.</p><p class="- topic/p ">Configure transport for nodes.</p><codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">groups:
  - name: linux
    nodes:
      - linux1.example.com
      - linux2.example.com
      - linux3.example.com
  - name: win
    nodes:
      - win1.example.com
      - win2.example.com
      - win3.example.com
    config:
      transport: winrm</codeblock><p class="- topic/p ">Configure login and escalation for a specific node.</p><codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">nodes:
  - name: host1.example.com
    config:
      ssh:
          user: me
          run-as: root</codeblock></section><section class="- topic/section "><title class="- topic/title ">Remote targets</title><p class="- topic/p ">Configure a remote target. When using the remote transport, the protocol of the
node name does not have to map to the transport if you set the transport config
option. This is useful if the target is an http API, for example:

            <codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">nodes:
  - host1.example.com
  - name: https://user1:secret@remote.example.com
    config:
      transport: remote
      remote:
        # The remote transport will use the host1.example.com target from
        # inventory to proxy tasks execution on.
        run-on: host1.example.com  
  # This will execute on localhost.
  - remote://my_aws_account</codeblock></p></section></conbody></concept>
