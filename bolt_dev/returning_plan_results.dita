<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="concept-6234" domains="(topic concept)                            (topic hi-d)                            (topic ut-d)                            (topic indexing-d)                             (topic pr-d)                            (topic sw-d)                            (topic ui-d)   " ditaarch:DITAArchVersion="1.2" class="- topic/topic concept/concept "><title class="- topic/title ">Returning results from plans</title><shortdesc class="- topic/shortdesc "> Use plans to return results that you can use in other plans or save for use outside of <ph conkeyref="ProductNames/bolt" class="- topic/ph "/>. </shortdesc><prolog class="- topic/prolog "><author type="creator" translate="no" class="- topic/author ">Kate Lopresti &lt;kate.lopresti@puppet.com&gt;</author></prolog><conbody class="- topic/body  concept/conbody "><p class="- topic/p ">Plans, unlike functions, are primarily run for side effects but they can optionally return a result. To return a result from a plan use the <codeph translate="no" class="+ topic/ph pr-d/codeph ">return</codeph> function. Any plan that does not call the <codeph translate="no" class="+ topic/ph pr-d/codeph ">return</codeph> function returns <codeph translate="no" class="+ topic/ph pr-d/codeph ">undef</codeph>.<codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">plan return_result(
  $nodes
) {
  return run_task('mytask', $nodes)
}</codeblock> </p><p class="- topic/p ">The result of a plan must match the <codeph translate="no" class="+ topic/ph pr-d/codeph ">PlanResult</codeph> type alias. This roughly includes JSON types as well as the Plan language types which have well defined JSON representations in <ph conkeyref="ProductNames/bolt" class="- topic/ph "/>.</p><p class="- topic/p "><ul class="- topic/ul "><li class="- topic/li "> <codeph translate="no" class="+ topic/ph pr-d/codeph ">Undef</codeph> </li><li class="- topic/li "> <codeph translate="no" class="+ topic/ph pr-d/codeph ">String</codeph> </li><li class="- topic/li "> <codeph translate="no" class="+ topic/ph pr-d/codeph ">Numeric</codeph> </li><li class="- topic/li "> <codeph translate="no" class="+ topic/ph pr-d/codeph ">Boolean</codeph> </li><li class="- topic/li "> <codeph translate="no" class="+ topic/ph pr-d/codeph ">Target</codeph> </li><li class="- topic/li "> <codeph translate="no" class="+ topic/ph pr-d/codeph ">Result</codeph> </li><li class="- topic/li "> <codeph translate="no" class="+ topic/ph pr-d/codeph ">ResultSet</codeph> </li><li class="- topic/li "> <codeph translate="no" class="+ topic/ph pr-d/codeph ">Error</codeph> </li><li class="- topic/li "> <codeph translate="no" class="+ topic/ph pr-d/codeph ">Array</codeph> with only <codeph translate="no" class="+ topic/ph pr-d/codeph ">PlanResult</codeph> </li><li class="- topic/li ">Hash with <codeph translate="no" class="+ topic/ph pr-d/codeph ">String</codeph> keys and <codeph translate="no" class="+ topic/ph pr-d/codeph ">PlanResult</codeph> values</li></ul></p><p class="- topic/p ">or</p><p class="- topic/p "><codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">Variant[Data, String, Numeric, Boolean, Error, Result, ResultSet, Target, Array[Boltlib::PlanResult], Hash[String, Boltlib::PlanResult]]
</codeblock></p></conbody></concept>
