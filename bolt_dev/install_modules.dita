<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="task-8928" domains="(topic task)                            (topic hi-d)                            (topic ut-d)                            (topic indexing-d)                              (topic pr-d)                            (topic sw-d)                            (topic ui-d)                            (topic task strictTaskbody-c)   " ditaarch:DITAArchVersion="1.2" class="- topic/topic task/task "><title class="- topic/title ">Set up&#160;<ph conkeyref="ProductNames/bolt" class="- topic/ph "/> to download and install modules</title><shortdesc class="- topic/shortdesc "/><prolog class="- topic/prolog "><author type="creator" translate="no" class="- topic/author ">Kate Lopresti &lt;kate.lopresti@puppet.com&gt;</author></prolog><taskbody class="- topic/body task/taskbody "><context class="- topic/section task/context "><p class="- topic/p ">Before you can use <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> to install modules, you must first create a Puppetfile. A Puppetfile is a formatted text file that contains a list of modules and their versions. It can include modules from the <ph conkeyref="ProductNames/forge" class="- topic/ph "/> or a Git repository. </p><p class="- topic/p ">For modules that require <ph conkeyref="ProductNames/ruby" class="- topic/ph "/> gems, see <xref href="bolt_install_package_gems.dita" class="- topic/xref "/> </p><p class="- topic/p ">For more details about specifying modules in a Puppetfile, see the <xref href="https://puppet.com/docs/pe/latest/puppetfile.html" format="html" scope="external" class="- topic/xref ">Puppetfile documentation</xref>.</p></context><steps class="- topic/ol task/steps "><step class="- topic/li task/step "> <cmd class="- topic/ph task/cmd ">Create a file named Puppetfile and store it in the Boltdir, which can be a directory named&#160;Boltdir&#160;at the root of your project or a global directory in&#160;<codeph translate="no" class="+ topic/ph pr-d/codeph ">$HOME/.puppetlabs/bolt</codeph>. </cmd> </step><step class="- topic/li task/step "> <cmd class="- topic/ph task/cmd ">Open the Puppetfile in a text editor and add the modules and versions that you want to install. If the modules have dependencies, list those as well. </cmd> <info class="- topic/itemgroup task/info "><codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock "># Modules from the Puppet Forge.
mod 'puppetlabs-package', '0.3.0'
mod 'puppetlabs-service', '0.4.0'
mod 'puppetlabs-puppet_conf', '0.3.0'
mod 'puppetlabs-facts', '0.3.1'

# Modules from a Git repository.
mod 'puppetlabs/puppetlabs-facter_task',
    git: 'git@github.com:puppetlabs/puppetlabs-facter_task.git',
    ref: 'master'
mod 'puppet_agent',
    git: 'https://github.com/puppetlabs/puppetlabs-puppet_agent',
    ref: '319ce44a65e73bcf2712ad17be01f9636f0673c9'</codeblock></info> </step><step class="- topic/li task/step "> <cmd class="- topic/ph task/cmd ">Add any task or plan modules stored locally in Boltdir to the list. If these modules are not listed in the Puppetfile, they are deleted.</cmd> <info class="- topic/itemgroup task/info "><codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">mod 'myteam/app_foo', local: true</codeblock><p class="- topic/p ">Alternately, any modules that you don't want to manage with the Puppetfile you can install to a different subdirectory in the Boltdir, such as <codeph translate="no" class="+ topic/ph pr-d/codeph ">site</codeph>.</p></info> </step><step class="- topic/li task/step "> <cmd class="- topic/ph task/cmd ">From a terminal, install the modules listed in the Puppetfile: <codeph class="+ topic/ph pr-d/codeph ">bolt puppetfile install</codeph>.</cmd> <stepresult class="- topic/itemgroup task/stepresult "><p class="- topic/p ">By default, <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> installs modules to the&#160;modules&#160;subdirectory inside the Boltdir. To override this location, update the&#160;modulepath&#160;setting in the <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> configuration file.</p></stepresult> </step></steps></taskbody></task>
