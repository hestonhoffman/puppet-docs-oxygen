<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="task-560" domains="(topic task)                            (topic hi-d)                            (topic ut-d)                            (topic indexing-d)                              (topic pr-d)                            (topic sw-d)                            (topic ui-d)                            (topic task strictTaskbody-c)   " ditaarch:DITAArchVersion="1.2" class="- topic/topic task/task "><title class="- topic/title ">conref manifest task</title><shortdesc class="- topic/shortdesc ">Create a manifest to set up a web server and run it as a plan.</shortdesc><prolog class="- topic/prolog "><author type="creator" translate="no" class="- topic/author ">Kate Lopresti &lt;kate.lopresti@puppet.com&gt;</author></prolog><taskbody class="- topic/body task/taskbody "><context class="- topic/section task/context ">
         <p class="- topic/p "/>
      </context><steps class="- topic/ol task/steps "><step id="step-1533845297884" class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Go to the modules directory in the <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> default Boltdir:  <codeph translate="no" class="+ topic/ph pr-d/codeph ">~/.puppetlabs/bolt/modules</codeph></cmd></step><step id="step-1533845333366" class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Create a module named <userinput class="+ topic/ph sw-d/userinput ">profiles</userinput>. </cmd><choices class="- topic/ul task/choices "><choice class="- topic/li task/choice ">If you use the <ph conkeyref="ProductNames/pdk_long" class="- topic/ph "/>: <codeph translate="no" class="+ topic/ph pr-d/codeph ">pdk new module profiles</codeph></choice><choice class="- topic/li task/choice ">Otherwise create <codeph translate="no" class="+ topic/ph pr-d/codeph ">~/.puppetlabs/bolt/modules/profiles</codeph></choice></choices></step><step id="step-1533845358347" class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">Add a <codeph translate="no" class="+ topic/ph pr-d/codeph ">plans</codeph>
            directory&#160;to the profiles module. </cmd></step><step id="step-1541699322979" class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">In the plans directory, create a manifest file called <userinput translate="no" class="+ topic/ph sw-d/userinput ">nginx_install.pp</userinput> and add the following code:</cmd><info class="- topic/itemgroup task/info ">
               <codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">plan profiles::nginx_install(
     TargetSpec $nodes,
     String $site_content = 'hello!',
   ) {

     # Install the puppet-agent package if Puppet is not detected.
     # Copy over custom facts from the Bolt modulepath.
     # Run the `facter` command line tool to gather node information.
     $nodes.apply_prep

     # Compile the manifest block into a catalog
     apply($nodes) {
       if($facts['os']['family'] == 'redhat') {
         package { 'epel-release':
           ensure =&gt; present,
           before =&gt; Package['nginx'],
         }
         $html_dir = '/usr/share/nginx/html'
       } else {
         $html_dir = '/var/www/html'
       }

       package {'nginx':
         ensure =&gt; present,
       }

       file {"${html_dir}/index.html":
         content =&gt; $site_content,
         ensure  =&gt; file,
       }

       service {'nginx':
         ensure  =&gt; 'running',
         enable  =&gt; 'true',
         require =&gt; Package['nginx']
       }
     }
   }</codeblock>
            </info></step><step id="step-1533845418694" class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">In the plans directory, create a manifest file called <userinput translate="no" class="+ topic/ph sw-d/userinput ">nginx_install.pp</userinput> and add the following code:</cmd><info class="- topic/itemgroup task/info ">
               <codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">plan profiles::iis_install(TargetSpec $nodes) {

  # Install the puppet-agent package if Puppet is not detected. 
  # Copy over custom facts from the Bolt modulepath.
  # Run the `facter` command line tool to gather node information.
  $nodes.apply_prep

  # Compile the manifest block into a catalog 
  apply($nodes) {
    iis_feature { ['Web-Webserver', 'Web-Scripting-Tools']:
  	ensure =&gt; present,
    } -&gt;
    file { 'minimal':
  	ensure =&gt; 'directory',
  	path   =&gt; 'C:/inetpub/minimal',
    } -&gt;
    iis_site { 'minimal':
  	ensure      	=&gt; started,
  	physicalpath	=&gt; 'C:/inetpub/minimal',
  	applicationpool =&gt; 'DefaultAppPool',
    }
  }
}</codeblock>
            </info></step><step id="step-1534293326233" class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">In the plans directory, create a manifest file called <userinput translate="no" class="+ topic/ph sw-d/userinput ">iis_install.pp</userinput> and add the following code:</cmd><info class="- topic/itemgroup task/info ">
               <codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">plan profiles::iis_install(
     TargetSpec $nodes,
     String $site_content = 'hello!',
   ) {

     # Install the puppet-agent package if Puppet is not detected. 
     # Copy over custom facts from the Bolt modulepath.
     # Run the `facter` command line tool to gather node information.
     $nodes.apply_prep

     # Compile the manifest block into a catalog
     return apply($nodes, '_catch_errors' =&gt; true) {
       $iis_features = ['Web-WebServer','Web-Scripting-Tools']

       iis_feature { $iis_features:
         ensure =&gt; 'present',
       }

       # Delete the default website to prevent a port binding conflict.
       iis_site {'Default Web Site':
         ensure  =&gt; absent,
         require =&gt; Iis_feature['Web-WebServer'],
       }

       iis_site { 'minimal':
         ensure          =&gt; 'started',
         physicalpath    =&gt; 'c:\\inetpub\\minimal',
         applicationpool =&gt; 'DefaultAppPool',
         require         =&gt; [
           File['minimal'],
           Iis_site['Default Web Site']
         ],
       }

       file { 'minimal':
         ensure =&gt; 'directory',
         path   =&gt; 'c:\\inetpub\\minimal',
       }

       file { 'content':
         ensure  =&gt; 'file',
         path    =&gt; 'c:\\inetpub\\minimal\\index.html',
         content =&gt; $site_content,
       }
     }
   }</codeblock>
            </info></step><step id="step-1533845462791" class="- topic/li task/step "><cmd class="- topic/ph task/cmd ">In a web browser, open  <codeph translate="no" class="+ topic/ph pr-d/codeph ">mynode.mydomain</codeph></cmd><stepresult class="- topic/itemgroup task/stepresult ">
               <p class="- topic/p ">The page displays the text <uicontrol class="+ topic/ph ui-d/uicontrol ">hello!</uicontrol></p>
            </stepresult></step></steps><result class="- topic/section task/result ">
         <p class="- topic/p "/>
      </result></taskbody></task>
