<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="concept-21" domains="(topic concept)                            (topic hi-d)                            (topic ut-d)                            (topic indexing-d)                             (topic pr-d)                            (topic sw-d)                            (topic ui-d)   " ditaarch:DITAArchVersion="1.2" class="- topic/topic concept/concept "><title class="- topic/title ">Specifying parameters</title><shortdesc class="- topic/shortdesc ">Parameters for tasks can be passed to the <codeph translate="no" class="+ topic/ph pr-d/codeph ">bolt</codeph> command as CLI arguments or as a JSON hash.</shortdesc><prolog class="- topic/prolog "><author type="creator" translate="no" class="- topic/author ">Jean Bond &lt;jean@puppet.com&gt;</author></prolog><conbody class="- topic/body  concept/conbody "><p class="- topic/p ">To pass parameters individually to your task or plan, specify the parameter value on the command line in the format <codeph translate="no" class="+ topic/ph pr-d/codeph ">parameter=value</codeph>. Pass multiple parameters as a space-separated list. <ph conkeyref="ProductNames/bolt" class="- topic/ph "/> attempts to parse each parameter value as JSON and compare that to the parameter type specified by the task or plan. If the parsed value matches the type it is used; otherwise, the original string is.</p><p class="- topic/p ">For example, to run the <codeph translate="no" class="+ topic/ph pr-d/codeph ">mysql::sql </codeph>task to show tables from a database called <codeph translate="no" class="+ topic/ph pr-d/codeph ">mydatabase</codeph>:<codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">bolt task run mysql::sql database=mydatabase sql="SHOW TABLES" --nodes neptune --modules ~/modules
</codeblock> </p><p class="- topic/p ">To pass a string value that is valid JSON to a parameter that would accept both quote the string. For example to pass the string <codeph translate="no" class="+ topic/ph pr-d/codeph ">true</codeph> to a parameter of type <codeph translate="no" class="+ topic/ph pr-d/codeph ">Variant[String, Boolean]</codeph> use <codeph translate="no" class="+ topic/ph pr-d/codeph ">'foo="true"'</codeph>. To pass a String value wrapped in <codeph translate="no" class="+ topic/ph pr-d/codeph ">"</codeph> quote and escape it <codeph translate="no" class="+ topic/ph pr-d/codeph ">'string="\"val\"'</codeph>. Alternatively, you can specify parameters as a single JSON object with the <codeph translate="no" class="+ topic/ph pr-d/codeph ">--params</codeph> flag, passing either a JSON object or a path to a parameter file.</p><p class="- topic/p ">To specify parameters as JSON, use the parameters flag followed by the JSON: <codeph translate="no" class="+ topic/ph pr-d/codeph ">--params '{"name": "openssl"}'</codeph> </p><p class="- topic/p "> To set parameters in a file, specify parameters in JSON format in a file, such as <codeph translate="no" class="+ topic/ph pr-d/codeph ">params.json</codeph>. For example, create a <codeph translate="no" class="+ topic/ph pr-d/codeph ">params.json</codeph> file that contains the following JSON: </p><p class="- topic/p "><codeblock translate="no" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">{
  "name":"openssl"
}</codeblock></p><p class="- topic/p ">Then specify the path to that file (starting with an at symbol, <codeph translate="no" class="+ topic/ph pr-d/codeph ">@</codeph>) on the command line with the parameters flag: <codeph translate="no" class="+ topic/ph pr-d/codeph ">--params @params.json</codeph> </p></conbody></concept>
